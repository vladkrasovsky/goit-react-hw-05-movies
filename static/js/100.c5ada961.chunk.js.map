{"version":3,"file":"static/js/100.c5ada961.chunk.js","mappings":"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","sources":["components/Cast/Cast.js","constants.js","services/moviedb-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams, useOutletContext } from 'react-router-dom';\nimport moviesAPI from 'services/moviedb-api';\nimport { Box } from 'components/Box';\n\nconst Cast = () => {\n  const { executeScroll } = useOutletContext();\n  const { movieId } = useParams();\n  const [cast, setCast] = useState();\n\n  useEffect(executeScroll);\n\n  useEffect(() => {\n    async function fetchCredits() {\n      const credits = await moviesAPI.getCredits(movieId);\n      setCast([...credits.cast]);\n    }\n    fetchCredits();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  if (!cast.length) {\n    return (\n      <Box as=\"p\" mt={3}>\n        We don't have any cast for this movie.\n      </Box>\n    );\n  }\n\n  return (\n    <Box as=\"ul\" p={3} display=\"flex\" flexWrap=\"wrap\" gridGap={10}>\n      {cast.map(({ character, original_name, profile_path }) => {\n        return (\n          <Box\n            key={original_name}\n            as=\"li\"\n            mb={3}\n            width={170}\n            display=\"flex\"\n            flexDirection=\"column\"\n          >\n            <img src={profile_path} alt=\"\" width={170} />\n            <h4>{original_name}</h4>\n            <p>\n              <small>Character: {character}</small>\n            </p>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n\nexport default Cast;\n","export const moviedb = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  POSTER_BASE_URL: 'https://image.tmdb.org/t/p/w500/',\n  POSTER_PLACEHOLDER_URL: 'https://placehold.co/500x750?text=No+Image',\n  API_KEY: '68fa3d310c9d2cffbb85ba21d660e67a',\n  LANGUAGE: 'en-US',\n  INCLUDE_ADULT: false,\n};\n","import axios from 'axios';\nimport { moviedb as config } from '../constants';\n\naxios.defaults.baseURL = config.BASE_URL;\n\nconst params = {\n  params: {\n    api_key: config.API_KEY,\n    language: config.LANGUAGE,\n    include_adult: config.INCLUDE_ADULT,\n  },\n};\n\nasync function getTrendings(page = 1) {\n  const urlAXIOS = `trending/movie/day?page=${page}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function getMovieDetails(movieId) {\n  const urlAXIOS = `movie/${movieId}`;\n\n  const { data } = await axios.get(urlAXIOS, params);\n  const { original_title, overview, vote_average, genres, poster_path } = data;\n\n  return {\n    original_title,\n    overview,\n    vote_average: vote_average.toFixed(1),\n    genres,\n    poster_path: poster_path\n      ? config.POSTER_BASE_URL + poster_path\n      : config.POSTER_PLACEHOLDER_URL,\n  };\n}\n\nasync function getCredits(movieId) {\n  const urlAXIOS = `movie/${movieId}/credits`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedCast = data.cast.map(\n    ({ character, original_name, profile_path }) => ({\n      character,\n      original_name,\n      profile_path: profile_path\n        ? config.POSTER_BASE_URL + profile_path\n        : config.POSTER_PLACEHOLDER_URL,\n    })\n  );\n\n  data.cast = normalizedCast;\n  return data;\n}\n\nasync function getReviews(movieId) {\n  const urlAXIOS = `movie/${movieId}/reviews`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function searchMovies(query) {\n  const urlAXIOS = `search/movie?query=${query}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nconst api = {\n  getTrendings,\n  getMovieDetails,\n  getCredits,\n  getReviews,\n  searchMovies,\n};\n\nexport default api;\n"],"names":["executeScroll","useOutletContext","movieId","useParams","useState","cast","setCast","useEffect","moviesAPI","credits","fetchCredits","length","Box","as","p","display","flexWrap","gridGap","map","character","original_name","profile_path","mb","width","flexDirection","src","alt","mt","moviedb","axios","config","params","api_key","language","include_adult","getTrendings","page","urlAXIOS","data","normalizedResults","results","id","title","getMovieDetails","original_title","overview","vote_average","genres","poster_path","toFixed","getCredits","normalizedCast","getReviews","author","content","searchMovies","query","api"],"sourceRoot":""}