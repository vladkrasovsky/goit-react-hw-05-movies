{"version":3,"file":"static/js/186.a30df285.chunk.js","mappings":"kNA+BA,EA3BmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,EAAG,EAAhB,SACGL,EAAOM,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,SAACL,EAAA,EAAD,CAAKC,GAAG,KAAR,UACE,SAAC,KAAD,CAAMK,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMV,GAA1C,SACGO,KAFaD,EAMrB,KAGN,C,sJCiBD,EAlCmB,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC3B,GAAoCC,EAAAA,EAAAA,UAASF,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACM,KAAVL,GACFI,EAAcJ,EAEjB,GAAE,CAACA,IASJ,OACE,kBAAMC,SARa,SAAAK,GACnBA,EAAEC,iBACFN,EAASK,EAAEE,cAAcR,MAAMS,MAChC,EAKC,WACE,kBACEC,KAAK,SACLC,KAAK,QACLF,MAAON,EACPS,SARoB,SAAAN,GAAC,OAAIF,EAAcE,EAAEO,OAAOJ,MAA3B,KAUvB,mBAAQC,KAAK,SAAb,sBAGL,E,oBCiBD,EAzCe,WAAO,IAAD,EACnB,GAA4BR,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAe0B,EAAf,KACA,GAA4BZ,EAAAA,EAAAA,UAAS,QAArC,eAAOa,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMnB,EAAK,UAAGkB,EAAaE,IAAI,gBAApB,QAAgC,IAE3Cf,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVL,EAGF,OAFAc,EAAU,SACVE,EAAU,QAHE,wCAOd,+GAE8BK,EAAAA,EAAAA,aAAuBrB,GAFrD,mBAEYsB,EAFZ,EAEYA,QACRR,GAAU,OAAIQ,MACVA,EAAQC,OAAS,GAJzB,uBAKMP,EAAU,YALhB,0BAQIA,EAAU,SARd,kDAUIQ,QAAQC,IAAI,KAAMC,SAVtB,2DAPc,0DAqBdC,EACD,GAAE,CAAC3B,IAIJ,OACE,iCACE,SAAC,EAAD,CAAYA,MAAOA,EAAOC,SAJb,SAAAD,GAAK,OAAImB,EAA0B,KAAVnB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAAhD,IAKN,UAAXe,IAAsB,uDACX,aAAXA,IAAyB,SAACa,EAAA,EAAD,CAAYxC,OAAQA,MAGnD,C,kGC7CYyC,EACD,gCADCA,EAEM,mCAFNA,EAGa,6CAHbA,EAIF,mCAJEA,EAKD,QALCA,GAMI,ECHjBC,EAAAA,EAAAA,SAAAA,QAAyBC,EAEzB,IAAMC,EAAS,CACbA,OAAQ,CACNC,QAASF,EACTG,SAAUH,EACVI,cAAeJ,IAIJK,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+GAA4BC,EAA5B,+BAAmC,EAC3BC,EADR,kCAC8CD,GAD9C,SAEyBP,EAAAA,EAAAA,IAAUQ,EAAUN,GAF7C,uBAEUO,EAFV,EAEUA,KAEFC,EAAoBD,EAAKjB,QAAQ5B,KAAI,kBAAoB,CAC7DC,GADyC,EAAGA,GAE5CC,MAFyC,EAAOA,MAAP,IAK3C2C,EAAKjB,QAAUkB,EATjB,kBAUSD,GAVT,mEAaeE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,4FACQJ,EADR,gBAC4BI,GAD5B,SAGyBZ,EAAAA,EAAAA,IAAUQ,EAAUN,GAH7C,uBAGUO,EAHV,EAGUA,KACAI,EAAgEJ,EAAhEI,eAAgBC,EAAgDL,EAAhDK,SAAUC,EAAsCN,EAAtCM,aAAcC,EAAwBP,EAAxBO,OAAQC,EAAgBR,EAAhBQ,YAJ1D,kBAMS,CACLJ,eAAAA,EACAC,SAAAA,EACAC,aAAcA,EAAaG,QAAQ,GACnCF,OAAAA,EACAC,YAAaA,EACThB,EAAyBgB,EACzBhB,IAbR,kEAiBekB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BP,GAA1B,oFACQJ,EADR,gBAC4BI,EAD5B,qBAEyBZ,EAAAA,EAAAA,IAAUQ,EAAUN,GAF7C,uBAEUO,EAFV,EAEUA,KAEFW,EAAiBX,EAAKY,KAAKzD,KAC/B,gBAAG0D,EAAH,EAAGA,UAAWC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,aAA7B,MAAiD,CAC/CF,UAAAA,EACAC,cAAAA,EACAC,aAAcA,EACVvB,EAAyBuB,EACzBvB,EALN,IASFQ,EAAKY,KAAOD,EAdd,kBAeSX,GAfT,kEAkBegB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0Bb,GAA1B,oFACQJ,EADR,gBAC4BI,EAD5B,qBAEyBZ,EAAAA,EAAAA,IAAUQ,EAAUN,GAF7C,uBAEUO,EAFV,EAEUA,KAEFC,EAAoBD,EAAKjB,QAAQ5B,KAAI,kBAA8B,CACvEC,GADyC,EAAGA,GAE5C6D,OAFyC,EAAOA,OAGhDC,QAHyC,EAAeA,QAAf,IAM3ClB,EAAKjB,QAAUkB,EAVjB,kBAWSD,GAXT,kEAcemB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4B1D,GAA5B,oFACQsC,EADR,6BACyCtC,GADzC,SAEyB8B,EAAAA,EAAAA,IAAUQ,EAAUN,GAF7C,uBAEUO,EAFV,EAEUA,KAEFC,EAAoBD,EAAKjB,QAAQ5B,KAAI,kBAAoB,CAC7DC,GADyC,EAAGA,GAE5CC,MAFyC,EAAOA,MAAP,IAK3C2C,EAAKjB,QAAUkB,EATjB,kBAUSD,GAVT,kEAaA,IAAMoB,EAAM,CACVvB,aApFF,WAQeA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA6EbK,gBA7EF,SAa+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAiEbQ,WAjEF,SAiB0B,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAiDbM,WAjDF,SAkB0B,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAgCbG,aAhCF,SAc4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAqBf,G","sources":["components/MoviesList/MoviesList.js","components/SearchForm/SearchForm.js","pages/Movies.js","constants.js","services/moviedb-api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Box } from 'components/Box';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Box as=\"ul\" p={2}>\n      {movies.map(({ id, title }) => {\n        return (\n          <Box as=\"li\" key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\nconst SearchForm = ({ query, onSubmit }) => {\n  const [queryValue, setQueryValue] = useState(query);\n\n  useEffect(() => {\n    if (query === '') {\n      setQueryValue(query);\n    }\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(e.currentTarget.query.value);\n  };\n\n  const handleQueryChange = e => setQueryValue(e.target.value);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"search\"\n        name=\"query\"\n        value={queryValue}\n        onChange={handleQueryChange}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  query: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import MoviesList from 'components/MoviesList';\nimport SearchForm from 'components/SearchForm';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport moviesAPI from 'services/moviedb-api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      setMovies([]);\n      setStatus('idle');\n      return;\n    }\n\n    async function fetchMovies() {\n      try {\n        const { results } = await moviesAPI.searchMovies(query);\n        setMovies([...results]);\n        if (results.length > 0) {\n          setStatus('resolved');\n          return;\n        }\n        setStatus('empty');\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n\n    fetchMovies();\n  }, [query]);\n\n  const getQuery = query => setSearchParams(query !== '' ? { query } : {});\n\n  return (\n    <>\n      <SearchForm query={query} onSubmit={getQuery} />\n      {status === 'empty' && <p>No matches for your query..</p>}\n      {status === 'resolved' && <MoviesList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","export const moviedb = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  POSTER_BASE_URL: 'https://image.tmdb.org/t/p/w500/',\n  POSTER_PLACEHOLDER_URL: 'https://placehold.co/500x750?text=No+Image',\n  API_KEY: '68fa3d310c9d2cffbb85ba21d660e67a',\n  LANGUAGE: 'en-US',\n  INCLUDE_ADULT: false,\n};\n","import axios from 'axios';\nimport { moviedb as config } from '../constants';\n\naxios.defaults.baseURL = config.BASE_URL;\n\nconst params = {\n  params: {\n    api_key: config.API_KEY,\n    language: config.LANGUAGE,\n    include_adult: config.INCLUDE_ADULT,\n  },\n};\n\nasync function getTrendings(page = 1) {\n  const urlAXIOS = `trending/movie/day?page=${page}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function getMovieDetails(movieId) {\n  const urlAXIOS = `movie/${movieId}`;\n\n  const { data } = await axios.get(urlAXIOS, params);\n  const { original_title, overview, vote_average, genres, poster_path } = data;\n\n  return {\n    original_title,\n    overview,\n    vote_average: vote_average.toFixed(1),\n    genres,\n    poster_path: poster_path\n      ? config.POSTER_BASE_URL + poster_path\n      : config.POSTER_PLACEHOLDER_URL,\n  };\n}\n\nasync function getCredits(movieId) {\n  const urlAXIOS = `movie/${movieId}/credits`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedCast = data.cast.map(\n    ({ character, original_name, profile_path }) => ({\n      character,\n      original_name,\n      profile_path: profile_path\n        ? config.POSTER_BASE_URL + profile_path\n        : config.POSTER_PLACEHOLDER_URL,\n    })\n  );\n\n  data.cast = normalizedCast;\n  return data;\n}\n\nasync function getReviews(movieId) {\n  const urlAXIOS = `movie/${movieId}/reviews`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function searchMovies(query) {\n  const urlAXIOS = `search/movie?query=${query}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nconst api = {\n  getTrendings,\n  getMovieDetails,\n  getCredits,\n  getReviews,\n  searchMovies,\n};\n\nexport default api;\n"],"names":["movies","location","useLocation","Box","as","p","map","id","title","to","state","from","query","onSubmit","useState","queryValue","setQueryValue","useEffect","e","preventDefault","currentTarget","value","type","name","onChange","target","setMovies","status","setStatus","useSearchParams","searchParams","setSearchParams","get","moviesAPI","results","length","console","log","message","fetchMovies","MoviesList","moviedb","axios","config","params","api_key","language","include_adult","getTrendings","page","urlAXIOS","data","normalizedResults","getMovieDetails","movieId","original_title","overview","vote_average","genres","poster_path","toFixed","getCredits","normalizedCast","cast","character","original_name","profile_path","getReviews","author","content","searchMovies","api"],"sourceRoot":""}