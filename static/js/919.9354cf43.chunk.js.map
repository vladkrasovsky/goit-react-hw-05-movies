{"version":3,"file":"static/js/919.9354cf43.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.js","constants.js","services/moviedb-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams, useOutletContext } from 'react-router-dom';\nimport moviesAPI from 'services/moviedb-api';\nimport { Box } from 'components/Box';\n\nconst Reviews = () => {\n  const { executeScroll } = useOutletContext();\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(executeScroll);\n\n  useEffect(() => {\n    async function fetchReviews() {\n      const { results } = await moviesAPI.getReviews(movieId);\n      setReviews([...results]);\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  if (!reviews.length) {\n    return (\n      <Box as=\"p\" mt={3}>\n        We don't have any reviews for this movie.\n      </Box>\n    );\n  }\n\n  return (\n    <Box as=\"ul\" p={4} id=\"reviews\">\n      {reviews.map(({ id, author, content }) => (\n        <Box as=\"li\" key={id} mb={3}>\n          <Box as=\"h4\" mb={2}>\n            Author: {author}\n          </Box>\n          <p>{content}</p>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\nexport default Reviews;\n","export const moviedb = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  POSTER_BASE_URL: 'https://image.tmdb.org/t/p/w500/',\n  POSTER_PLACEHOLDER_URL: 'https://placehold.co/500x750?text=No+Image',\n  API_KEY: '68fa3d310c9d2cffbb85ba21d660e67a',\n  LANGUAGE: 'en-US',\n  INCLUDE_ADULT: false,\n};\n","import axios from 'axios';\nimport { moviedb as config } from '../constants';\n\naxios.defaults.baseURL = config.BASE_URL;\n\nconst params = {\n  params: {\n    api_key: config.API_KEY,\n    language: config.LANGUAGE,\n    include_adult: config.INCLUDE_ADULT,\n  },\n};\n\nasync function getTrendings(page = 1) {\n  const urlAXIOS = `trending/movie/day?page=${page}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function getMovieDetails(movieId) {\n  const urlAXIOS = `movie/${movieId}`;\n\n  const { data } = await axios.get(urlAXIOS, params);\n  const { original_title, overview, vote_average, genres, poster_path } = data;\n\n  return {\n    original_title,\n    overview,\n    vote_average: vote_average.toFixed(1),\n    genres,\n    poster_path: poster_path\n      ? config.POSTER_BASE_URL + poster_path\n      : config.POSTER_PLACEHOLDER_URL,\n  };\n}\n\nasync function getCredits(movieId) {\n  const urlAXIOS = `movie/${movieId}/credits`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedCast = data.cast.map(\n    ({ character, original_name, profile_path }) => ({\n      character,\n      original_name,\n      profile_path: profile_path\n        ? config.POSTER_BASE_URL + profile_path\n        : config.POSTER_PLACEHOLDER_URL,\n    })\n  );\n\n  data.cast = normalizedCast;\n  return data;\n}\n\nasync function getReviews(movieId) {\n  const urlAXIOS = `movie/${movieId}/reviews`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nasync function searchMovies(query) {\n  const urlAXIOS = `search/movie?query=${query}`;\n  const { data } = await axios.get(urlAXIOS, params);\n\n  const normalizedResults = data.results.map(({ id, title }) => ({\n    id,\n    title,\n  }));\n\n  data.results = normalizedResults;\n  return data;\n}\n\nconst api = {\n  getTrendings,\n  getMovieDetails,\n  getCredits,\n  getReviews,\n  searchMovies,\n};\n\nexport default api;\n"],"names":["executeScroll","useOutletContext","movieId","useParams","useState","reviews","setReviews","useEffect","moviesAPI","results","fetchReviews","length","Box","as","p","id","map","author","content","mb","mt","moviedb","axios","config","params","api_key","language","include_adult","getTrendings","page","urlAXIOS","data","normalizedResults","title","getMovieDetails","original_title","overview","vote_average","genres","poster_path","toFixed","getCredits","normalizedCast","cast","character","original_name","profile_path","getReviews","searchMovies","query","api"],"sourceRoot":""}